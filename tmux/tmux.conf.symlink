# Scroll up with mouse
set-option -g mouse on

# Scrollback buffer
set -g history-limit 65000

# tmux display things in 256 colors
# set-option -g default-terminal "screen-256color"
set-option -g default-terminal "xterm-256color"
set-option -ga terminal-overrides ",xterm-256color:Tc"

# allow for navigating between words with option
set-window-option -g xterm-keys on

# command delay? We don't want that, make it short
set -sg escape-time 10

# Allow the arrow key to be used immediately after changing windows
set-option -g repeat-time 0

# Set window notifications
setw -g monitor-activity on
set -g visual-activity on

# switch panes without prefix using Alt-arrow
bind -n M-Left select-pane -L
bind -n M-Right select-pane -R
bind -n M-Up select-pane -U
bind -n M-Down select-pane -D

### BEGIN NEW THEME
GRAY="#808080"
VILOET="646695"
BLUE="#569CD6"
DARK_BLUE="#223E55"
LIGHT_BLUE="#9CDCFE"
GREEN="#608B4E"
BLUE_GREEN="#4EC9B0"
LIGHT_GREEN="#B5CEA8"
RED="#EE4646"
ORANGE="#CE9178"
LIGHT_RED="#CC6666"
YELLOW_ORANGE="#CCCC66"
YELLOW="#CCCC99"
PINK="#C586C0"
# BACKGROUND="#1E1E1E"
BACKGROUND="#000000"
FOREGROUND="#CCCCCC"
BLACK="#000000"

# Status update interval
set -g status-interval 1

# With this you set the window name in the status line.
# Beware of outrageous prompts, such as the default one in RHEL 7.
# set -g set-titles on

# Reduce time to wait for Escape key. You'll want this for neovim.
set-option escape-time 40

# Basic status bar colors
set -g status-style $BACKGRROUND
set -g pane-border-style fg=$DARK_BLUE
set -g pane-active-border-style fg=$BLUE

# Left side of status bar
set -g status-left-length 40
set -g status-left "#[fg=$BLUE,nobold] %Y-%m-%d %H:%M:%S "

# Window status
set -g window-status-current-format "#[fg=$GRAY,nobold]#T "

# Right side of status bar
set -g status-right-length 150
set -g status-right "\
#[fg=$GRAY,bg=$BACKGROUND] #(pmset -g ps | grep '%' | awk '{print $3}' | tr -d ';') \
#[bg=$BACKGROUND,fg=$BLUE,nobold] #(ipconfig getifaddr en0) "

# Tmux uses a 'control key', let's set it to 'Ctrl-a'
# Reason: 'Ctrl-a' is easier to reach than 'Ctrl-b'
# set -g prefix C-a
set -g prefix C-b
unbind C-a

# Allow us to reload our Tmux configuration while
# using Tmux
bind r source-file ~/.tmux.conf \; display "Reloaded!"

# Rotate the layout
bind-key enter next-layout

# kill window
bind 'k' kill-window

# break pane to a new window
bind-key 'b' break-pane

# Use the vertical and horizontal symbols to split the screen
# in the current path.
bind - split-window -c "#{pane_current_path}"
bind \ split-window -h -c "#{pane_current_path}"
bind c new-window -c "#{pane_current_path}"

# Add support for additional aliases of splitting
bind '"' split-window -c "#{pane_current_path}"
bind % split-window -h -c "#{pane_current_path}"

# Shell binding for copy-paste
# set -g default-shell $SHELL
# set -g default-command "reattach-to-user-namespace -l ${SHELL}"

# Vim bindings for copy mode
setw -g mode-keys vi
bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X copy-pipe-and-cancel "reattach-to-user-namespace pbcopy"

# use vim-like keys for splits and windows
bind-key v split-window -h -c "#{pane_current_path}"
bind-key s split-window -v -c "#{pane_current_path}"
bind-key h select-pane -L
bind-key j select-pane -D
bind-key k select-pane -U
bind-key l select-pane -R

bind-key space next-window
bind-key bspace previous-window
bind-key enter next-layout
bind-key C-o rotate-window

bind-key + select-layout main-horizontal
bind-key = select-layout main-vertical
set-window-option -g other-pane-height 25
set-window-option -g other-pane-width 80

bind-key a last-pane
bind-key q display-panes
bind-key c new-window
bind-key t next-window
bind-key T previous-window

bind-key : command-prompt
bind-key L clear-history
